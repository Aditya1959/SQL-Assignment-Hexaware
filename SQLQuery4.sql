-- 1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT venue_id, (SELECT AVG(ticket_price) FROM Event AS e WHERE e.venue_id = v.venue_id) AS average_ticket_price FROM Event AS v GROUP BY venue_id;

-- 2. Find Events with More Than 50% of Tickets Sold using subquery
SELECT event_id, event_name FROM Event AS e WHERE (SELECT COUNT(*) FROM Booking AS b WHERE b.event_id = e.event_id) > (e.total_seats * 0.5);

-- 3. Calculate the Total Number of Tickets Sold for Each Event
SELECT event_id, SUM(num_tickets) AS total_tickets_sold FROM Booking GROUP BY event_id;

-- 4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery
SELECT customer_id, customer_name FROM Customer AS c WHERE NOT EXISTS (SELECT 1 FROM Booking AS b WHERE b.customer_id = c.customer_id);

-- 5. List Events with No Ticket Sales Using a NOT IN Subquery
SELECT event_id, event_name FROM Event WHERE event_id NOT IN (SELECT event_id FROM Booking);

-- 6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause
SELECT event_type, total_tickets_sold FROM (SELECT e.event_type, SUM(b.num_tickets) AS total_tickets_sold FROM Event AS e INNER JOIN Booking AS b ON e.event_id = b.event_id GROUP BY e.event_type) AS subquery;

-- 7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause
SELECT event_id, event_name FROM Event WHERE ticket_price > (SELECT AVG(ticket_price) FROM Event);

-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery
SELECT c.customer_id, c.customer_name, (SELECT SUM(b.num_tickets * e.ticket_price) FROM Booking AS b INNER JOIN Event AS e ON b.event_id = e.event_id WHERE b.customer_id = c.customer_id) AS total_revenue FROM Customer AS c;

-- 9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause
DECLARE @GivenVenueId INT; -- Declare the variable
SET @GivenVenueId = 1; -- Set the variable to the desired venue ID (change 1 to the actual ID you want to query)

SELECT DISTINCT c.customer_id, c.customer_name 
FROM Customer AS c 
WHERE c.customer_id IN (
    SELECT b.customer_id 
    FROM Booking AS b 
    INNER JOIN Event AS e ON b.event_id = e.event_id 
    WHERE e.venue_id = @GivenVenueId
);

-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY
SELECT event_type, total_tickets_sold FROM (SELECT e.event_type, SUM(b.num_tickets) AS total_tickets_sold FROM Event AS e INNER JOIN Booking AS b ON e.event_id = b.event_id GROUP BY e.event_type) AS subquery;

-- 11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT
DECLARE @GivenMonth INT; -- Declare the variable
SET @GivenMonth = 9; -- Set the variable to the desired month number
SELECT customer_id, customer_name FROM Customer AS c WHERE EXISTS (SELECT 1 FROM Booking AS b WHERE b.customer_id = c.customer_id AND MONTH(b.booking_date) = @GivenMonth);

-- 12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT venue_id, (SELECT AVG(ticket_price) FROM Event AS e WHERE e.venue_id = v.venue_id) AS average_ticket_price FROM Event AS v GROUP BY venue_id;
