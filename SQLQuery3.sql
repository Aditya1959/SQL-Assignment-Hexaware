-- 3.1. List Events and Their Average Ticket Prices
SELECT event_id, event_name, AVG(ticket_price) AS average_ticket_price FROM Event GROUP BY event_id, event_name;

-- 3.2. Calculate the Total Revenue Generated by Events
SELECT SUM(num_tickets * ticket_price) AS total_revenue FROM Booking INNER JOIN Event ON Booking.event_id = Event.event_id;

-- 3.3. Find the Event with the Highest Ticket Sales
SELECT TOP 1 Event.event_id, Event.event_name, SUM(Booking.num_tickets) AS total_tickets_sold FROM Booking INNER JOIN Event ON Booking.event_id = Event.event_id 
GROUP BY Event.event_id, Event.event_name ORDER BY total_tickets_sold DESC;

-- 3.4. Calculate the Total Number of Tickets Sold for Each Event
SELECT Event.event_id, Event.event_name, SUM(Booking.num_tickets) AS total_tickets_sold FROM Booking INNER JOIN Event ON Booking.event_id = Event.event_id GROUP BY Event.event_id, Event.event_name;

-- 3.5. Find Events with No Ticket Sales
SELECT Event.event_id, event_name FROM Event LEFT JOIN Booking ON Event.event_id = Booking.event_id WHERE Booking.event_id IS NULL;

-- 3.6. Find the User Who Has Booked the Most Tickets
SELECT TOP 1 customer_id, SUM(num_tickets) AS total_tickets_booked FROM Booking GROUP BY customer_id ORDER BY total_tickets_booked DESC;

-- 3.7. List Events and the Total Number of Tickets Sold for Each Month
SELECT 
    e.event_id, 
    e.event_name, 
    MONTH(b.booking_date) AS booking_month,
    YEAR(b.booking_date) AS booking_year,
    SUM(b.num_tickets) AS total_tickets_sold 
FROM Event AS e INNER JOIN Booking AS b ON e.event_id = b.event_id GROUP BY e.event_id, e.event_name, MONTH(b.booking_date), YEAR(b.booking_date) ORDER BY 
booking_year, booking_month;

-- 3.8. Calculate the Average Ticket Price for Events in Each Venue
SELECT e.venue_id,AVG(e.ticket_price) AS average_ticket_price FROM Event AS e GROUP BY e.venue_id;

-- 3.9. Calculate the Total Number of Tickets Sold for Each Event Type
SELECT e.event_type, SUM(b.num_tickets) AS total_tickets_sold FROM Event AS e INNER JOIN Booking AS b ON e.event_id = b.event_id GROUP BY e.event_type;

-- 3.10. Calculate the Total Revenue Generated by Events in Each Year
SELECT YEAR(e.event_date) AS event_year,SUM(b.num_tickets * e.ticket_price) AS total_revenue FROM Event AS e INNER JOIN Booking AS b ON e.event_id = b.event_id 
GROUP BY YEAR(e.event_date) ORDER BY event_year;

-- 3.11. List Users Who Have Booked Tickets for Multiple Events
SELECT c.customer_id, c.customer_name FROM Customer AS c INNER JOIN Booking AS b ON c.customer_id = b.customer_id GROUP BY c.customer_id, c.customer_name HAVING 
COUNT(DISTINCT b.event_id) > 1;

-- 3.12. Calculate the Total Revenue Generated by Events for Each User
SELECT c.customer_id, c.customer_name, SUM(b.num_tickets * e.ticket_price) AS total_revenue FROM Customer AS c INNER JOIN Booking AS b ON c.customer_id = b.customer_id 
INNER JOIN Event AS e ON b.event_id = e.event_id GROUP BY c.customer_id, c.customer_name;

-- 3.13. Calculate the Average Ticket Price for Events in Each Category and Venue
SELECT e.event_type,e.venue_id, AVG(e.ticket_price) AS average_ticket_price FROM Event AS e GROUP BY e.event_type, e.venue_id;

-- 3.14. List Users and the Total Number of Tickets They've Purchased in the Last 30 Days
SELECT c.customer_id, c.customer_name, SUM(b.num_tickets) AS total_tickets_purchased FROM Customer AS c INNER JOIN Booking AS b ON c.customer_id = b.customer_id 
WHERE b.booking_date >= DATEADD(DAY, -30, GETDATE()) GROUP BY c.customer_id, c.customer_name;

